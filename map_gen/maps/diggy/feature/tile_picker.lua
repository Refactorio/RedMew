--[[-- info
    Provides nicer tile picking
]]

-- dependencies
local Event = require 'utils.event'
local perlin_noise = require 'map_gen.shared.perlin_noise'.noise

-- this
local Picker = {}

local floor = math.floor
local random = math.random

local enabled = false
local replacement_tiles
local tile_count
local noise_variance
local seed

-- should be called once before calling get_tile
function Picker.set_seed(new_seed)
    seed = new_seed
end

-- returns tile generated by perlin noise from coordinates
function Picker.get_tile(x, y)
    if not enabled then
        return 'dirt-' .. random(1, 7)
    end

    -- value in range [-1, 1]
    local noise
    if seed then
        noise = perlin_noise(x * noise_variance, y * noise_variance, seed)
    else
        noise = perlin_noise(x * noise_variance, y * noise_variance)
    end

    -- value in range [0, 1]
    local corrected_noise = (noise + 1) / 2

    -- value in range [1, tile_count]
    local tile_number = floor(corrected_noise * tile_count) + 1

    -- just in case perlin_noise() returns '1', not even sure if it can
    if tile_number > tile_count then
        tile_number = tile_count
    end

    return replacement_tiles[tile_number]
end

function Picker.register(config)
    enabled = true
    replacement_tiles = config.tiles or {'dirt-1', 'dirt-2', 'dirt-3', 'dirt-4', 'dirt-5', 'dirt-6', 'dirt-7'}
    tile_count = #replacement_tiles
    noise_variance = config.noise_variance or 0.03

    -- add landfill event
    Event.add(defines.events.on_player_built_tile, function(event)
        local item = event.item
        if not item or item.name ~= 'landfill' then
            return
        end

        local tiles = event.tiles
        for i = 1, #tiles do
            local tile_name = Picker.get_tile(tiles[i].position.x, tiles[i].position.y)
            tiles[i].name = tile_name
        end

        local surface = game.surfaces[event.surface_index]
        surface.set_tiles(tiles)
    end)
end

return Picker
